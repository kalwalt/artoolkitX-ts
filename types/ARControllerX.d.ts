interface ImageObj {
    videoWidth: number;
    width: number;
    videoHeight: number;
    height: number;
    data: Uint8ClampedArray;
}
export default class ARControllerX {
    private options;
    private id;
    private width;
    private height;
    private image;
    private imageData;
    private orientation;
    private cameraParam;
    private cameraParaFileURL;
    private cameraId;
    private cameraLoaded;
    private artoolkitX;
    private listeners;
    private nftMarkers;
    private trackables;
    private transform_mat;
    private marker_transform_mat;
    private transformGL_RH;
    private videoWidth;
    private videoHeight;
    private videoSize;
    private framepointer;
    private framesize;
    private dataHeap;
    private videoLuma;
    private camera_mat;
    private videoLumaPointer;
    private canvas;
    private ctx;
    private nftMarkerFound;
    private nftMarkerFoundTime;
    private nftMarkerCount;
    private defaultMarkerWidth;
    private _bwpointer;
    constructor(image: object, cameraPara: string, confWidth: number, confHeight: number);
    start(): Promise<void>;
    process(image: ImageObj): Promise<void>;
    _processImage(image: ImageObj): void;
    private _prepareImage;
    addEventListener(name: string, callback: object): void;
    removeEventListener(name: string, callback: object): void;
    dispatchEvent(event: {
        name: string;
        target: any;
        data?: object;
    }): void;
    debugSetup(): void;
    transMatToGLMat(transMat: Float64Array, glMat: Float64Array, scale?: number): Float64Array;
    arglCameraViewRHf(glMatrix: Float64Array, glRhMatrix?: Float64Array, scale?: number): Float64Array;
    getTransformationMatrix(): Float64Array;
    getCameraMatrix(): Float64Array;
    setDebugMode(mode: boolean): number;
    getDebugMode(): boolean;
    setLogLevel(mode: boolean): number;
    getLogLevel(): number;
    setProjectionNearPlane(value: number): void;
    getProjectionNearPlane(): number;
    setProjectionFarPlane(value: number): void;
    getProjectionFarPlane(): number;
    setThresholdMode(mode: number): number;
    getThresholdMode(): number;
    setThreshold(threshold: number): number;
    getThreshold(): number;
    setImageProcMode(mode: number): number;
    getImageProcMode(): number;
    private converter;
}
export {};
